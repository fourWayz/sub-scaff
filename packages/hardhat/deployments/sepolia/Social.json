{
  "address": "0xB52fC2785a71693D895A81576990414A59E40780",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PostCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "PostLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "addComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPosts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "likes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commentsCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Social.Post[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentId",
          "type": "uint256"
        }
      ],
      "name": "getComment",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPostsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            }
          ],
          "internalType": "struct Social.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "likePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postComments",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postCommentsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9c10bf02374bff6cf191304a240cd3f45f1bb136041c51b9b52230341192352",
  "receipt": {
    "to": null,
    "from": "0x17C103b11b0d329E9f944a455FfA36f3bd9EfB50",
    "contractAddress": "0xB52fC2785a71693D895A81576990414A59E40780",
    "transactionIndex": 35,
    "gasUsed": "1253293",
    "logsBloom": "0x
    "blockHash": "0x2c749ce0737a1c88b149374bc67cf6a23a738b363bd75a0694a33aa147587798",
    "transactionHash": "0xa9c10bf02374bff6cf191304a240cd3f45f1bb136041c51b9b52230341192352",
    "logs": [],
    "blockNumber": 6054969,
    "cumulativeGasUsed": "7801401",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c6fcd038439473d5e1fe835a61b45214",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"PostLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"addComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPosts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Social.Post[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentId\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"struct Social.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"likePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postComments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postCommentsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Social.sol\":\"Social\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Social.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Social {\\n    // Address of the contract owner\\n    address public owner;\\n\\n    // Struct representing a user\\n    struct User {\\n        string username;\\n        address userAddress;\\n        bool isRegistered;\\n    }\\n\\n    // Mapping from user address to user details\\n    mapping(address => User) public users;\\n\\n    // Struct representing a post\\n    struct Post {\\n        address author;\\n        string content;\\n        uint256 timestamp;\\n        uint256 likes;\\n        uint256 commentsCount;\\n    }\\n\\n    // Struct representing a comment\\n    struct Comment {\\n        address commenter;\\n        string content;\\n        uint256 timestamp;\\n    }\\n\\n    // Mapping from post ID to comment ID to comment details\\n    mapping(uint256 => mapping(uint256 => Comment)) public postComments;\\n\\n    // Mapping from post ID to count of comments\\n    mapping(uint256 => uint256) public postCommentsCount;\\n\\n    // Array to store all posts\\n    Post[] public posts;\\n\\n    // Event emitted when a user is registered\\n    event UserRegistered(address indexed userAddress, string username);\\n\\n    // Event emitted when a post is created\\n    event PostCreated(address indexed author, string content, uint256 timestamp);\\n\\n    // Event emitted when a post is liked\\n    event PostLiked(address indexed liker, uint256 indexed postId);\\n\\n    // Event emitted when a comment is added\\n    event CommentAdded(address indexed commenter, uint256 indexed postId, string content, uint256 timestamp);\\n\\n    // Modifier to restrict function access to registered users\\n    modifier onlyRegisteredUser() {\\n        require(users[msg.sender].isRegistered, \\\"User is not registered\\\");\\n        _;\\n    }\\n\\n    // Modifier to restrict function access to the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    // Constructor to set the owner of the contract to the deployer\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Function to register a new user\\n    function registerUser(string memory _username) external {\\n        require(!users[msg.sender].isRegistered, \\\"User is already registered\\\");\\n        require(bytes(_username).length > 0, \\\"Username should not be empty\\\");\\n\\n        users[msg.sender] = User({\\n            username: _username,\\n            userAddress: msg.sender,\\n            isRegistered: true\\n        });\\n\\n        emit UserRegistered(msg.sender, _username);\\n    }\\n\\n    // Function to get user details by address\\n    function getUserByAddress(address _userAddress) external view returns (User memory) {\\n        require(users[_userAddress].isRegistered, \\\"User not found\\\");\\n        return users[_userAddress];\\n    }\\n\\n    // Function to create a new post\\n    function createPost(string memory _content) external onlyRegisteredUser {\\n        require(bytes(_content).length > 0, \\\"Content should not be empty\\\");\\n\\n        posts.push(Post({\\n            author: msg.sender,\\n            content: _content,\\n            timestamp: block.timestamp,\\n            likes: 0,\\n            commentsCount: 0\\n        }));\\n\\n        emit PostCreated(msg.sender, _content, block.timestamp);\\n    }\\n\\n    // Function to like a post\\n    function likePost(uint256 _postId) external onlyRegisteredUser {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n\\n        Post storage post = posts[_postId];\\n        post.likes++;\\n\\n        emit PostLiked(msg.sender, _postId);\\n    }\\n\\n    // Function to add a comment to a post\\n    function addComment(uint256 _postId, string memory _content) external onlyRegisteredUser {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(bytes(_content).length > 0, \\\"Comment should not be empty\\\");\\n\\n        uint256 commentId = postCommentsCount[_postId];\\n        postComments[_postId][commentId] = Comment({\\n            commenter: msg.sender,\\n            content: _content,\\n            timestamp: block.timestamp\\n        });\\n\\n        postCommentsCount[_postId]++;\\n        posts[_postId].commentsCount++;\\n\\n        emit CommentAdded(msg.sender, _postId, _content, block.timestamp);\\n    }\\n\\n    // Function to get the count of posts\\n    function getPostsCount() external view returns (uint256) {\\n        return posts.length;\\n    }\\n\\n    // Function to get details of a specific post\\n    function getPost(uint256 _postId) external view returns (\\n        address author,\\n        string memory content,\\n        uint256 timestamp,\\n        uint256 likes,\\n        uint256 commentsCount\\n    ) {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        Post memory post = posts[_postId];\\n        return (post.author, post.content, post.timestamp, post.likes, post.commentsCount);\\n    }\\n\\n\\tfunction getAllPosts() external view returns (Post[] memory){\\n\\t\\treturn posts;\\n\\t}\\n\\n    // Function to get details of a specific comment on a post\\n    function getComment(uint256 _postId, uint256 _commentId) external view returns (\\n        address commenter,\\n        string memory content,\\n        uint256 timestamp\\n    ) {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(_commentId < postCommentsCount[_postId], \\\"Comment does not exist\\\");\\n\\n        Comment memory comment = postComments[_postId][_commentId];\\n        return (comment.commenter, comment.content, comment.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x8500c649c7b193ee4d7c18c0e8fced722b76f86da28859c272e605167bde82dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561154c806100326000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063725009d31161008c578063a87430ba11610066578063a87430ba146101fe578063aa7e568314610220578063c7303c6114610233578063d82d72bf1461024657600080fd5b8063725009d3146101ae57806383624882146101c15780638da5cb5b146101d357600080fd5b806348892753116100c857806348892753146101445780635193c94c1461016657806369c212f614610179578063704f1b941461019957600080fd5b80630b1e7f83146100ef578063305611001461011c57806340731c2414610131575b600080fd5b6101026100fd366004610f95565b610266565b604051610113959493929190610ff4565b60405180910390f35b61012461033a565b6040516101139190611035565b61010261013f366004610f95565b61045f565b6101576101523660046110d5565b6105b9565b604051610113939291906110f7565b6101576101743660046110d5565b610727565b61018c61018736600461112b565b6107e7565b604051610113919061115b565b6101ac6101a7366004611247565b610949565b005b6101ac6101bc366004610f95565b610ab3565b6004545b604051908152602001610113565b6000546101e6906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b61021161020c36600461112b565b610b7e565b60405161011393929190611284565b6101ac61022e3660046112b7565b610c38565b6101ac610241366004611247565b610dfa565b6101c5610254366004610f95565b60036020526000908152604090205481565b6004818154811061027657600080fd5b6000918252602090912060059091020180546001820180546001600160a01b039092169350906102a5906112fe565b80601f01602080910402602001604051908101604052809291908181526020018280546102d1906112fe565b801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b5050505050908060020154908060030154908060040154905085565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156104565760008481526020908190206040805160a081019091526005850290910180546001600160a01b0316825260018101805492939192918401916103a7906112fe565b80601f01602080910402602001604051908101604052809291908181526020018280546103d3906112fe565b80156104205780601f106103f557610100808354040283529160200191610420565b820191906000526020600020905b81548152906001019060200180831161040357829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815250508152602001906001019061035e565b50505050905090565b60006060600080600060048054905086106104955760405162461bcd60e51b815260040161048c90611338565b60405180910390fd5b6000600487815481106104aa576104aa611365565b60009182526020918290206040805160a0810190915260059092020180546001600160a01b0316825260018101805492939192918401916104ea906112fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610516906112fe565b80156105635780601f1061053857610100808354040283529160200191610563565b820191906000526020600020905b81548152906001019060200180831161054657829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481525050905080600001518160200151826040015183606001518460800151955095509550955095505091939590929450565b60006060600060048054905085106105e35760405162461bcd60e51b815260040161048c90611338565b60008581526003602052604090205484106106395760405162461bcd60e51b815260206004820152601660248201527510dbdb5b595b9d08191bd95cc81b9bdd08195e1a5cdd60521b604482015260640161048c565b6000858152600260209081526040808320878452825280832081516060810190925280546001600160a01b03168252600181018054929391929184019161067f906112fe565b80601f01602080910402602001604051908101604052809291908181526020018280546106ab906112fe565b80156106f85780601f106106cd576101008083540402835291602001916106f8565b820191906000526020600020905b8154815290600101906020018083116106db57829003601f168201915b505050918352505060029190910154602091820152815190820151604090920151909891975095509350505050565b6002602090815260009283526040808420909152908252902080546001820180546001600160a01b03909216929161075e906112fe565b80601f016020809104026020016040519081016040528092919081815260200182805461078a906112fe565b80156107d75780601f106107ac576101008083540402835291602001916107d7565b820191906000526020600020905b8154815290600101906020018083116107ba57829003601f168201915b5050505050908060020154905083565b60408051606080820183528152600060208201819052918101919091526001600160a01b03821660009081526001602081905260409091200154600160a01b900460ff166108685760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b604482015260640161048c565b6001600160a01b0382166000908152600160205260409081902081516060810190925280548290829061089a906112fe565b80601f01602080910402602001604051908101604052809291908181526020018280546108c6906112fe565b80156109135780601f106108e857610100808354040283529160200191610913565b820191906000526020600020905b8154815290600101906020018083116108f657829003601f168201915b5050509183525050600191909101546001600160a01b0381166020830152600160a01b900460ff16151560409091015292915050565b3360009081526001602081905260409091200154600160a01b900460ff16156109b45760405162461bcd60e51b815260206004820152601a60248201527f5573657220697320616c72656164792072656769737465726564000000000000604482015260640161048c565b6000815111610a055760405162461bcd60e51b815260206004820152601c60248201527f557365726e616d652073686f756c64206e6f7420626520656d70747900000000604482015260640161048c565b604080516060810182528281523360208083018290526001838501819052600092835290529190912081518190610a3c90826113ca565b506020820151600190910180546040938401511515600160a01b026001600160a81b03199091166001600160a01b03909316929092179190911790555133907f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f90610aa890849061148a565b60405180910390a250565b3360009081526001602081905260409091200154600160a01b900460ff16610aed5760405162461bcd60e51b815260040161048c9061149d565b6004548110610b0e5760405162461bcd60e51b815260040161048c90611338565b600060048281548110610b2357610b23611365565b90600052602060002090600502019050806003016000815480929190610b48906114cd565b9091555050604051829033907f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b90600090a35050565b600160205260009081526040902080548190610b99906112fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc5906112fe565b8015610c125780601f10610be757610100808354040283529160200191610c12565b820191906000526020600020905b815481529060010190602001808311610bf557829003601f168201915b505050600190930154919250506001600160a01b0381169060ff600160a01b9091041683565b3360009081526001602081905260409091200154600160a01b900460ff16610c725760405162461bcd60e51b815260040161048c9061149d565b6004548210610c935760405162461bcd60e51b815260040161048c90611338565b6000815111610ce45760405162461bcd60e51b815260206004820152601b60248201527f436f6d6d656e742073686f756c64206e6f7420626520656d7074790000000000604482015260640161048c565b600082815260036020908152604080832054815160608101835233815280840186815242828501528786526002855283862083875290945291909320815181546001600160a01b0319166001600160a01b0390911617815591519091906001820190610d5090826113ca565b5060409182015160029091015560008481526003602052908120805491610d76836114cd565b919050555060048381548110610d8e57610d8e611365565b600091825260208220600460059092020101805491610dac836114cd565b919050555082336001600160a01b03167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e48442604051610ded9291906114f4565b60405180910390a3505050565b3360009081526001602081905260409091200154600160a01b900460ff16610e345760405162461bcd60e51b815260040161048c9061149d565b6000815111610e855760405162461bcd60e51b815260206004820152601b60248201527f436f6e74656e742073686f756c64206e6f7420626520656d7074790000000000604482015260640161048c565b6040805160a0810182523381526020810183815242928201929092526000606082018190526080820181905260048054600181018255915281517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600590920291820180546001600160a01b0319166001600160a01b0390921691909117815592519192917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c90910190610f3990826113ca565b506040820151816002015560608201518160030155608082015181600401555050336001600160a01b03167fb5a2d6ecdc9bd09637c1de2e8e02011abe041770e16737ec2adfa54c8e0581c78242604051610aa89291906114f4565b600060208284031215610fa757600080fd5b5035919050565b6000815180845260005b81811015610fd457602081850181015186830182015201610fb8565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038616815260a06020820181905260009061101890830187610fae565b604083019590955250606081019290925260809091015292915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156110c757888303603f19018552815180516001600160a01b031684528781015160a08986018190529061109582870182610fae565b838a0151878b01526060808501519088015260809384015193909601929092525050938601939086019060010161105c565b509098975050505050505050565b600080604083850312156110e857600080fd5b50508035926020909101359150565b6001600160a01b038416815260606020820181905260009061111b90830185610fae565b9050826040830152949350505050565b60006020828403121561113d57600080fd5b81356001600160a01b038116811461115457600080fd5b9392505050565b6020815260008251606060208401526111776080840182610fae565b60208501516001600160a01b03166040858101919091529094015115156060909301929092525090919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126111cb57600080fd5b813567ffffffffffffffff808211156111e6576111e66111a4565b604051601f8301601f19908116603f0116810190828211818310171561120e5761120e6111a4565b8160405283815286602085880101111561122757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561125957600080fd5b813567ffffffffffffffff81111561127057600080fd5b61127c848285016111ba565b949350505050565b6060815260006112976060830186610fae565b6001600160a01b0394909416602083015250901515604090910152919050565b600080604083850312156112ca57600080fd5b82359150602083013567ffffffffffffffff8111156112e857600080fd5b6112f4858286016111ba565b9150509250929050565b600181811c9082168061131257607f821691505b60208210810361133257634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260139082015272141bdcdd08191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b601f8211156113c557600081815260208120601f850160051c810160208610156113a25750805b601f850160051c820191505b818110156113c1578281556001016113ae565b5050505b505050565b815167ffffffffffffffff8111156113e4576113e46111a4565b6113f8816113f284546112fe565b8461137b565b602080601f83116001811461142d57600084156114155750858301515b600019600386901b1c1916600185901b1785556113c1565b600085815260208120601f198616915b8281101561145c5788860151825594840194600190910190840161143d565b508582101561147a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260006111546020830184610fae565b602080825260169082015275155cd95c881a5cc81b9bdd081c9959da5cdd195c995960521b604082015260600190565b6000600182016114ed57634e487b7160e01b600052601160045260246000fd5b5060010190565b6040815260006115076040830185610fae565b9050826020830152939250505056fea2646970667358221220295f2b573a7cf79e5cfb714ee5b2989753761493770a07c1d939c9063204533c64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063725009d31161008c578063a87430ba11610066578063a87430ba146101fe578063aa7e568314610220578063c7303c6114610233578063d82d72bf1461024657600080fd5b8063725009d3146101ae57806383624882146101c15780638da5cb5b146101d357600080fd5b806348892753116100c857806348892753146101445780635193c94c1461016657806369c212f614610179578063704f1b941461019957600080fd5b80630b1e7f83146100ef578063305611001461011c57806340731c2414610131575b600080fd5b6101026100fd366004610f95565b610266565b604051610113959493929190610ff4565b60405180910390f35b61012461033a565b6040516101139190611035565b61010261013f366004610f95565b61045f565b6101576101523660046110d5565b6105b9565b604051610113939291906110f7565b6101576101743660046110d5565b610727565b61018c61018736600461112b565b6107e7565b604051610113919061115b565b6101ac6101a7366004611247565b610949565b005b6101ac6101bc366004610f95565b610ab3565b6004545b604051908152602001610113565b6000546101e6906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b61021161020c36600461112b565b610b7e565b60405161011393929190611284565b6101ac61022e3660046112b7565b610c38565b6101ac610241366004611247565b610dfa565b6101c5610254366004610f95565b60036020526000908152604090205481565b6004818154811061027657600080fd5b6000918252602090912060059091020180546001820180546001600160a01b039092169350906102a5906112fe565b80601f01602080910402602001604051908101604052809291908181526020018280546102d1906112fe565b801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b5050505050908060020154908060030154908060040154905085565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156104565760008481526020908190206040805160a081019091526005850290910180546001600160a01b0316825260018101805492939192918401916103a7906112fe565b80601f01602080910402602001604051908101604052809291908181526020018280546103d3906112fe565b80156104205780601f106103f557610100808354040283529160200191610420565b820191906000526020600020905b81548152906001019060200180831161040357829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815250508152602001906001019061035e565b50505050905090565b60006060600080600060048054905086106104955760405162461bcd60e51b815260040161048c90611338565b60405180910390fd5b6000600487815481106104aa576104aa611365565b60009182526020918290206040805160a0810190915260059092020180546001600160a01b0316825260018101805492939192918401916104ea906112fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610516906112fe565b80156105635780601f1061053857610100808354040283529160200191610563565b820191906000526020600020905b81548152906001019060200180831161054657829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481525050905080600001518160200151826040015183606001518460800151955095509550955095505091939590929450565b60006060600060048054905085106105e35760405162461bcd60e51b815260040161048c90611338565b60008581526003602052604090205484106106395760405162461bcd60e51b815260206004820152601660248201527510dbdb5b595b9d08191bd95cc81b9bdd08195e1a5cdd60521b604482015260640161048c565b6000858152600260209081526040808320878452825280832081516060810190925280546001600160a01b03168252600181018054929391929184019161067f906112fe565b80601f01602080910402602001604051908101604052809291908181526020018280546106ab906112fe565b80156106f85780601f106106cd576101008083540402835291602001916106f8565b820191906000526020600020905b8154815290600101906020018083116106db57829003601f168201915b505050918352505060029190910154602091820152815190820151604090920151909891975095509350505050565b6002602090815260009283526040808420909152908252902080546001820180546001600160a01b03909216929161075e906112fe565b80601f016020809104026020016040519081016040528092919081815260200182805461078a906112fe565b80156107d75780601f106107ac576101008083540402835291602001916107d7565b820191906000526020600020905b8154815290600101906020018083116107ba57829003601f168201915b5050505050908060020154905083565b60408051606080820183528152600060208201819052918101919091526001600160a01b03821660009081526001602081905260409091200154600160a01b900460ff166108685760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b604482015260640161048c565b6001600160a01b0382166000908152600160205260409081902081516060810190925280548290829061089a906112fe565b80601f01602080910402602001604051908101604052809291908181526020018280546108c6906112fe565b80156109135780601f106108e857610100808354040283529160200191610913565b820191906000526020600020905b8154815290600101906020018083116108f657829003601f168201915b5050509183525050600191909101546001600160a01b0381166020830152600160a01b900460ff16151560409091015292915050565b3360009081526001602081905260409091200154600160a01b900460ff16156109b45760405162461bcd60e51b815260206004820152601a60248201527f5573657220697320616c72656164792072656769737465726564000000000000604482015260640161048c565b6000815111610a055760405162461bcd60e51b815260206004820152601c60248201527f557365726e616d652073686f756c64206e6f7420626520656d70747900000000604482015260640161048c565b604080516060810182528281523360208083018290526001838501819052600092835290529190912081518190610a3c90826113ca565b506020820151600190910180546040938401511515600160a01b026001600160a81b03199091166001600160a01b03909316929092179190911790555133907f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f90610aa890849061148a565b60405180910390a250565b3360009081526001602081905260409091200154600160a01b900460ff16610aed5760405162461bcd60e51b815260040161048c9061149d565b6004548110610b0e5760405162461bcd60e51b815260040161048c90611338565b600060048281548110610b2357610b23611365565b90600052602060002090600502019050806003016000815480929190610b48906114cd565b9091555050604051829033907f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b90600090a35050565b600160205260009081526040902080548190610b99906112fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc5906112fe565b8015610c125780601f10610be757610100808354040283529160200191610c12565b820191906000526020600020905b815481529060010190602001808311610bf557829003601f168201915b505050600190930154919250506001600160a01b0381169060ff600160a01b9091041683565b3360009081526001602081905260409091200154600160a01b900460ff16610c725760405162461bcd60e51b815260040161048c9061149d565b6004548210610c935760405162461bcd60e51b815260040161048c90611338565b6000815111610ce45760405162461bcd60e51b815260206004820152601b60248201527f436f6d6d656e742073686f756c64206e6f7420626520656d7074790000000000604482015260640161048c565b600082815260036020908152604080832054815160608101835233815280840186815242828501528786526002855283862083875290945291909320815181546001600160a01b0319166001600160a01b0390911617815591519091906001820190610d5090826113ca565b5060409182015160029091015560008481526003602052908120805491610d76836114cd565b919050555060048381548110610d8e57610d8e611365565b600091825260208220600460059092020101805491610dac836114cd565b919050555082336001600160a01b03167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e48442604051610ded9291906114f4565b60405180910390a3505050565b3360009081526001602081905260409091200154600160a01b900460ff16610e345760405162461bcd60e51b815260040161048c9061149d565b6000815111610e855760405162461bcd60e51b815260206004820152601b60248201527f436f6e74656e742073686f756c64206e6f7420626520656d7074790000000000604482015260640161048c565b6040805160a0810182523381526020810183815242928201929092526000606082018190526080820181905260048054600181018255915281517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600590920291820180546001600160a01b0319166001600160a01b0390921691909117815592519192917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c90910190610f3990826113ca565b506040820151816002015560608201518160030155608082015181600401555050336001600160a01b03167fb5a2d6ecdc9bd09637c1de2e8e02011abe041770e16737ec2adfa54c8e0581c78242604051610aa89291906114f4565b600060208284031215610fa757600080fd5b5035919050565b6000815180845260005b81811015610fd457602081850181015186830182015201610fb8565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038616815260a06020820181905260009061101890830187610fae565b604083019590955250606081019290925260809091015292915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156110c757888303603f19018552815180516001600160a01b031684528781015160a08986018190529061109582870182610fae565b838a0151878b01526060808501519088015260809384015193909601929092525050938601939086019060010161105c565b509098975050505050505050565b600080604083850312156110e857600080fd5b50508035926020909101359150565b6001600160a01b038416815260606020820181905260009061111b90830185610fae565b9050826040830152949350505050565b60006020828403121561113d57600080fd5b81356001600160a01b038116811461115457600080fd5b9392505050565b6020815260008251606060208401526111776080840182610fae565b60208501516001600160a01b03166040858101919091529094015115156060909301929092525090919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126111cb57600080fd5b813567ffffffffffffffff808211156111e6576111e66111a4565b604051601f8301601f19908116603f0116810190828211818310171561120e5761120e6111a4565b8160405283815286602085880101111561122757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561125957600080fd5b813567ffffffffffffffff81111561127057600080fd5b61127c848285016111ba565b949350505050565b6060815260006112976060830186610fae565b6001600160a01b0394909416602083015250901515604090910152919050565b600080604083850312156112ca57600080fd5b82359150602083013567ffffffffffffffff8111156112e857600080fd5b6112f4858286016111ba565b9150509250929050565b600181811c9082168061131257607f821691505b60208210810361133257634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260139082015272141bdcdd08191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b601f8211156113c557600081815260208120601f850160051c810160208610156113a25750805b601f850160051c820191505b818110156113c1578281556001016113ae565b5050505b505050565b815167ffffffffffffffff8111156113e4576113e46111a4565b6113f8816113f284546112fe565b8461137b565b602080601f83116001811461142d57600084156114155750858301515b600019600386901b1c1916600185901b1785556113c1565b600085815260208120601f198616915b8281101561145c5788860151825594840194600190910190840161143d565b508582101561147a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260006111546020830184610fae565b602080825260169082015275155cd95c881a5cc81b9bdd081c9959da5cdd195c995960521b604082015260600190565b6000600182016114ed57634e487b7160e01b600052601160045260246000fd5b5060010190565b6040815260006115076040830185610fae565b9050826020830152939250505056fea2646970667358221220295f2b573a7cf79e5cfb714ee5b2989753761493770a07c1d939c9063204533c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/Social.sol:Social",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15,
        "contract": "contracts/Social.sol:Social",
        "label": "users",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(User)10_storage)"
      },
      {
        "astId": 40,
        "contract": "contracts/Social.sol:Social",
        "label": "postComments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)33_storage))"
      },
      {
        "astId": 44,
        "contract": "contracts/Social.sol:Social",
        "label": "postCommentsCount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 48,
        "contract": "contracts/Social.sol:Social",
        "label": "posts",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Post)26_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Post)26_storage)dyn_storage": {
        "base": "t_struct(Post)26_storage",
        "encoding": "dynamic_array",
        "label": "struct Social.Post[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(User)10_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Social.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)10_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)33_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Social.Comment))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Comment)33_storage)"
      },
      "t_mapping(t_uint256,t_struct(Comment)33_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Social.Comment)",
        "numberOfBytes": "32",
        "value": "t_struct(Comment)33_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)33_storage": {
        "encoding": "inplace",
        "label": "struct Social.Comment",
        "members": [
          {
            "astId": 28,
            "contract": "contracts/Social.sol:Social",
            "label": "commenter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 30,
            "contract": "contracts/Social.sol:Social",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 32,
            "contract": "contracts/Social.sol:Social",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Post)26_storage": {
        "encoding": "inplace",
        "label": "struct Social.Post",
        "members": [
          {
            "astId": 17,
            "contract": "contracts/Social.sol:Social",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19,
            "contract": "contracts/Social.sol:Social",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 21,
            "contract": "contracts/Social.sol:Social",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/Social.sol:Social",
            "label": "likes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 25,
            "contract": "contracts/Social.sol:Social",
            "label": "commentsCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(User)10_storage": {
        "encoding": "inplace",
        "label": "struct Social.User",
        "members": [
          {
            "astId": 5,
            "contract": "contracts/Social.sol:Social",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7,
            "contract": "contracts/Social.sol:Social",
            "label": "userAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9,
            "contract": "contracts/Social.sol:Social",
            "label": "isRegistered",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
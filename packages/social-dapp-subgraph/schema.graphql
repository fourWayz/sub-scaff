type Comment @entity {
  id: Bytes!
  commenter: User! @derivedFrom(field: "comments")
  post: Post!
  content: String! # string
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Post @entity {
  id: Bytes!
  author: User! @derivedFrom(field: "posts")
  content: String! # string
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  comments: [Comment!]! @derivedFrom(field: "post")
  likes: [PostLiked!]! @derivedFrom(field: "post")
}

type PostLiked @entity {
  id: Bytes!
  liker: User! @derivedFrom(field: "likes")
  post: Post!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type User @entity {
  id: Bytes!
  userAddress: Bytes! # address
  username: String! # string
  posts: [Post!]! @derivedFrom(field: "author")
  comments: [Comment!]! @derivedFrom(field: "commenter")
  likes: [PostLiked!]! @derivedFrom(field: "liker")
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Query {
  postsByUser(userAddress: Bytes!): [Post!]!
  commentsByPost(postId: Bytes!): [Comment!]!
  mostLikedPosts(limit: Int!): [Post!]!
}

schema {
  query: Query
}
